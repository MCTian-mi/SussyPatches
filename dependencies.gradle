//file:noinspection DependencyNotationArgument
// TODO remove when fixed in RFG ^
/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *       For more info, see https://github.com/GregTechCEu/Buildscripts/blob/master/docs/shadow.md
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * To add a mod with CurseMaven, replace '("g:n:v:c")' in the above with 'rfg.deobf("curse.maven:project_slug-project_id:file_id")'
 * Example: devOnlyNonPublishable(rfg.deobf("curse.maven:top-245211:2667280"))
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.4/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {

    // # Fix crashes on macOS with Narrator
    runtimeOnly 'com.cleanroommc:osxnarratorblocker:1.0'

    api 'codechicken:codechickenlib:3.2.3.358' transitive false
    implementation 'gregtech:gregtech:2.8.10-beta' transitive false
    compileOnly 'gregicality:GregicalityMultiblocks:1.2.11' transitive false

    // # Transitive GregTech dependencies
    // CTM 1.0.2.31
    compileOnly 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.700'
    compileOnly 'appeng:ae2-uel:v0.56.7' transitive false

    compileOnlyApi 'com.cleanroommc:configanytime:3.0'

    // # Optional dependencies. Uncomment the ones you need
//    runtimeOnlyNonPublishable rfg.deobf('curse.maven:ctm-267602:2915363')
//    runtimeOnlyNonPublishable 'com.cleanroommc:groovyscript:1.2.4' transitive false
//    runtimeOnlyNonPublishable rfg.deobf("curse.maven:supercritical-1185871:6793777")
//    runtimeOnlyNonPublishable rfg.deobf('maven.modrinth:fluidlogged-api:3.0.6')
//    runtimeOnlyNonPublishable rfg.deobf('curse.maven:fluidlogged-api-485654:4564413')
//    runtimeOnlyNonPublishable rfg.deobf("curse.maven:lolasm-460609:6333774")
//    runtimeOnlyNonPublishable rfg.deobf("curse.maven:flare-692142:6598523")
//    runtimeOnlyNonPublishable rfg.deobf("curse.maven:vintagefix-871198:6609247")
//    runtimeOnlyNonPublishable rfg.deobf("curse.maven:alfheim-lighting-engine-910715:6687458")
//    runtimeOnlyNonPublishable rfg.deobf("curse.maven:red-core-873867:6230904")

    // # OptiFine
//    // Copied from GTCEu, originally used to download latest Vintagium from GitHub
//    // Using Gradle's Ant integration seems to be the least hacky way to download an arbitrary file without a plugin
//    file('libs/optifine').mkdirs()
//    ant.get(src: 'https://github.com/OpenCubicChunks/OptiFineDevTweaker/releases/download/2.6.15/aa_do_not_rename_OptiFineDevTweaker-2.6.15-all.jar',
//            dest: 'libs/optifine/',
//            skipexisting: 'true')
//    // Download OptiFine from some random GitHub repo I found by just searching
//    // Since I failed to get the jar from https://optifine.net/home
//    ant.get(src: 'https://github.com/SynArchive/OptiFine-Archive/raw/refs/heads/main/1.12.2/preview_OptiFine_1.12.2_HD_U_G6_pre1.jar',
//            dest: 'libs/optifine/',
//            skipexisting: 'true')
//    runtimeOnly files('libs/optifine/*')
}
